#pragma kernel CSMain
#pragma kernel Apply
#pragma kernel Clear
#pragma use_dxc

#define CLEAR 18446744073709551615

#define ulong uint64_t
// #define ulong uint

Texture2D<float4> points;
Texture2D<float4> colors;
RWStructuredBuffer<ulong> intBuffer;
RWTexture2DArray<float4> display;
RWTexture2DArray<float> depth;
int2 displaySize;
int eyeIndex;
float4x4 model;
float4x4 viewProj;
#define PIXELSIZE 5

uint DisplayCoordsToIndex(uint2 displayCoords)
{
    return displayCoords.x + displayCoords.y * displaySize.x;
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 pos = points[id.xy].xyz;
	
	float4 hcs = mul(viewProj, mul(model, float4(points[id.xy].xyz, 1)));
	float3 ndc = (hcs.xyz / hcs.w);
	
	ndc.xy = ndc.xy * 0.5 + 0.5;
    
	if (ndc.z < 0 || ndc.x < 0 || ndc.x > 1 || ndc.y < 0 || ndc.y > 1)
		return;
    
	uint2 i = ndc.xy * displaySize;
	
	float3 color = colors[id.xy].rgb;
	
	uint r, g, b;
	r = uint(color.r * 255) << 16;
	g = uint(color.b * 255) << 8;
	b = uint(color.g * 255) << 0;
	
	ulong depth = asuint(1 - (hcs.z / hcs.w));
	ulong p = (depth << 32) | r | g | b;
	
	uint pixHalf = PIXELSIZE / 2;
	for (int x = 0; x < PIXELSIZE; x++)
	{
		for (int y = 0; y < PIXELSIZE; y++)
		{
			uint index = DisplayCoordsToIndex(i + uint2(x - pixHalf, y - pixHalf));
			
			if (p < intBuffer[index])
				//intBuffer[index] = p;
				InterlockedMin(intBuffer[index], p);	
		}
	}
}

[numthreads(8, 8, 1)]
void Apply(uint3 id : SV_DispatchThreadID)
{
    uint index = DisplayCoordsToIndex(id.xy);
    ulong p = intBuffer[index];
    uint col = (uint) p;
	
    float r, g, b, z;
    r = (0x000000FF & (col >> 16)) / 255.0;
    g = (0x000000FF & (col >> 8)) / 255.0;
    b = (0x000000FF & (col >> 0)) / 255.0;
	
	z = (1 - asfloat(uint(p >> 32))); 
	
    float4 color = float4(r, g, b, p != CLEAR);
	
	display[uint3(id.xy, eyeIndex)] = color;
	depth[uint3(id.xy, eyeIndex)] = z;
}

[numthreads(64, 1, 1)]
void Clear(uint id : SV_DispatchThreadID)
{
	intBuffer[id] = CLEAR;
}